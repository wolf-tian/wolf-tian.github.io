{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/archer/source/assets/example_qr.png","path":"assets/example_qr.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/psu1.jpg","path":"assets/psu1.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":0,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/psu.jpg","path":"avatar/psu.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/archer/.eslintrc.json","hash":"f398447605f56aa0bb9e250f8df0651a1f79ac45","modified":1520922922988},{"_id":"themes/archer/.gitignore","hash":"d734edbdd316a19eae0ac2421256ac60dd61a1f8","modified":1520922922992},{"_id":"themes/archer/LICENSE","hash":"35f4fb806270f8243459c870a2141e795dfab166","modified":1520922922997},{"_id":"themes/archer/README.md","hash":"f18523f720bfdbead16453dd43a80292c739dbd8","modified":1520922923001},{"_id":"themes/archer/_config.yml","hash":"ccebf549617dadf394c15065e334b826ae28063d","modified":1520928264017},{"_id":"themes/archer/gulpfile.js","hash":"4425599995b6c818274f4a27067f484eaf357d05","modified":1520922923036},{"_id":"themes/archer/package.json","hash":"9ca2cf9a37698bff53bce357bc64a55692a9a4e8","modified":1520922923185},{"_id":"themes/archer/webpack.config.js","hash":"369feedf559c96614506523dbabe95206ef2d20c","modified":1520922923494},{"_id":"themes/archer/webpack.prod.js","hash":"b6d35f7e9a9718b3e5e3e17c52fcc5e7c38330b0","modified":1520922923498},{"_id":"source/_posts/RxJava 2.X.md","hash":"48398e9ce3010d5f6c55a2bae1ad579e17f6cb91","modified":1520917567412},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1520916861680},{"_id":"themes/archer/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1520922922902},{"_id":"themes/archer/.git/config","hash":"cdce7d63d0abdeb24d5df5736f4a0062220ae695","modified":1520922922951},{"_id":"themes/archer/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1520922911084},{"_id":"themes/archer/.git/index","hash":"7e7e53b593b5ac5c7230367c3cf72138f46b1bb2","modified":1520922923502},{"_id":"themes/archer/.git/packed-refs","hash":"7ffb32afe91e4f23f6dcef35d7d7208fdd851b4f","modified":1520922922866},{"_id":"themes/archer/docs/README-en.md","hash":"58b6518bc0de951b6ee3bde9e7dd8fdd16ded003","modified":1520922923013},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"8a544d8196d456cbae1de78ba01bd7530f9653b1","modified":1520922923017},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"f20432b5b6453ad7f452b06d5adbfe558a15646f","modified":1520922923021},{"_id":"themes/archer/layout/404.ejs","hash":"a054b4ea1147846bed4252dd56182cb8e32d95eb","modified":1520922923042},{"_id":"themes/archer/layout/about.ejs","hash":"990df15653a99453617e72dfc195fa0a75b9a5d1","modified":1520922923150},{"_id":"themes/archer/layout/index.ejs","hash":"3fd60bc795a8153d35fb6047a64ed55c589f7cbd","modified":1520922923154},{"_id":"themes/archer/layout/layout.ejs","hash":"51ff4c08e884337c19a2d849333a6d46922f1db8","modified":1520922923158},{"_id":"themes/archer/layout/post.ejs","hash":"7399b459dcf103a7fcb264c0b75f3f9e5c86dec7","modified":1520922923163},{"_id":"themes/archer/layout/site-meta.ejs","hash":"28b014bc19e934e3b118064e32d68d8a32a6a682","modified":1520922923168},{"_id":"themes/archer/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1520922911090},{"_id":"themes/archer/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1520922911095},{"_id":"themes/archer/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1520922911099},{"_id":"themes/archer/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1520922911104},{"_id":"themes/archer/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1520922911109},{"_id":"themes/archer/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1520922911114},{"_id":"themes/archer/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1520922911118},{"_id":"themes/archer/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1520922911124},{"_id":"themes/archer/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1520922911128},{"_id":"themes/archer/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1520922911134},{"_id":"themes/archer/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1520922911138},{"_id":"themes/archer/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1520922911144},{"_id":"themes/archer/.git/logs/HEAD","hash":"058ae471718b7733a28a672b0bddca44c8e5d5d8","modified":1520922922923},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"85cb8af231248188124dc9aa793a7f8318608d6d","modified":1520922923049},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"92da263076aa7c54b9b651d744b7261a2df39072","modified":1520922923054},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"5cf97ec87976daa8747611b1da95396c312aba90","modified":1520922923059},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"af76b1a18a63934e83b078bf5f9f886e972a0ceb","modified":1520922923063},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"dcf88c81a85232f8298c5327673da7147214a677","modified":1520922923067},{"_id":"themes/archer/layout/_partial/base-share.ejs","hash":"593398145ff712f3c01fff9fe2d2b38bfa8bb20b","modified":1520922923072},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"92ac580acc20bde7b3345bfe132671b9043bfbd6","modified":1520922923077},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"0b8cbfeeb0d57eea6a6ef5d5232c54ce2082490f","modified":1520922923081},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"fc03729825ac7ffd4045f910bbd936bc5841c65e","modified":1520922923119},{"_id":"themes/archer/source/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1520922923193},{"_id":"themes/archer/source/assets/favicon.ico","hash":"8b200c575d273d41a179c102442e191414e74eae","modified":1520922923199},{"_id":"themes/archer/source/assets/loading.svg","hash":"85082b002bae1335114b71550350907884187e38","modified":1520922923203},{"_id":"themes/archer/source/assets/psu1.jpg","hash":"01d1694c6c54b4c5626c787b7bda63e1d6eb7cab","modified":1520927533314},{"_id":"themes/archer/source/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1520922923210},{"_id":"themes/archer/source/css/mobile.css","hash":"dc1fef5067bce18e53b0ab43bf6a9864133a8ac9","modified":1520922923218},{"_id":"themes/archer/source/css/style.css","hash":"29935ab7188396f7d6cf2d88dc2703fc0002d5e3","modified":1520922923224},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1520922923238},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1520922923243},{"_id":"themes/archer/source/scripts/main.js","hash":"f20e400cc890b3d0191a16a1fad6c276a3a8b3e7","modified":1520922923300},{"_id":"themes/archer/source/scripts/share.js","hash":"0b5db87fbf926e0b1962145d86ee9d5c7e64c44e","modified":1520922923306},{"_id":"themes/archer/src/js/browser.js","hash":"6e98eacb585fc24fe1f14e80dcb8d3b7d1b463fb","modified":1520922923314},{"_id":"themes/archer/src/js/init.js","hash":"f47516ec632d592e9eac4f528d455bd2e95de886","modified":1520922923318},{"_id":"themes/archer/src/js/initSidebar.js","hash":"d94a9da296c56e9b75def4386849df2b3b80e982","modified":1520922923324},{"_id":"themes/archer/src/js/main.js","hash":"92b68c696ee0a163a5367af2d3f2ef76592b1d6c","modified":1520922923330},{"_id":"themes/archer/src/js/mobile.js","hash":"27b974d628a94f5abd700ca7757bcd153d866442","modified":1520922923335},{"_id":"themes/archer/src/js/scroll.js","hash":"149f251f6ae1a319eecfc903ece61b9a6f4bede4","modified":1520922923342},{"_id":"themes/archer/src/js/share.js","hash":"0c0ccd800e063bda901b99e5bfbe96c72723e5ba","modified":1520922923352},{"_id":"themes/archer/src/js/sidebar.js","hash":"a90865aefc0f933d391c297ebf06960ac322af34","modified":1520922923357},{"_id":"themes/archer/src/js/tag.js","hash":"b220a7ed370e8b6258df2bdef027ada5673c4b66","modified":1520922923363},{"_id":"themes/archer/src/js/toc.js","hash":"874acd62f4be465008baeee08cc38bcce308ef98","modified":1520922923369},{"_id":"themes/archer/src/js/util.js","hash":"da642e9e6b50ef56a6f85dab85d19b087e4ba373","modified":1520922923374},{"_id":"themes/archer/src/scss/_common.scss","hash":"3ee1d0fa5d22a9ba8634aa6e7580c061888ef13b","modified":1520922923382},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"728e06c7d9713fcc610ab0133e60778fb1d9a8c0","modified":1520922923387},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"9123aa118cc636b4bfe718b87274d0b9732d8e89","modified":1520922923393},{"_id":"themes/archer/src/scss/_variables.scss","hash":"d5aaaa885977ed1424851da99e277bb61e3727f3","modified":1520922923480},{"_id":"themes/archer/src/scss/mobile.scss","hash":"4e454f976cb1796a7848c855b4a8e17baa8d13ba","modified":1520922923485},{"_id":"themes/archer/src/scss/style.scss","hash":"ff391096622b1f3e1f44aea92c78c1a336a21b2f","modified":1520922923490},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520922923089},{"_id":"themes/archer/package-lock.json","hash":"3222a22ce66d166f389bd5bd453b2d8450cf77bb","modified":1520922923180},{"_id":"themes/archer/source/avatar/psu.jpg","hash":"baee2d2df4d8c09a014ae85c4ef8ee825a2058d9","modified":1520927559099},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1520922923233},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1520922923249},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1520922923255},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1520922923263},{"_id":"themes/archer/.git/refs/heads/master","hash":"dcb63a16068753f6f4ccaba62187387ed9788b3d","modified":1520922922918},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"60189b4c02a1b886ecfdc758c55c9a24fa7d36af","modified":1520922923087},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"cfdb15116abe89f4b54f7bb18a0b23a597c47a60","modified":1520922923095},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"c043a98e33252b9a628bfd31c4a3b2883dce2b99","modified":1520922923100},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"a6acb5d7778ade98ba5b6932e38a585460513f49","modified":1520922923104},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"483c07212879b116b772f428547c9962be96d2ce","modified":1520922923109},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"272a416b929c81cec0d682c6679be670cf5745d5","modified":1520922923115},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"0181560515ef12c6a8f33cbf2bd6d5807d0ebd48","modified":1520922923125},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"c5ce643a06a2103aa4ac0d8279c024f90886d37f","modified":1520922923131},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"237a1b8002661065407a6bf96c3188eb09597525","modified":1520922923135},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"4feb7c3d17a3c8994eb095d43d75fbd0f1ed5b4f","modified":1520922923140},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"e96750b1aa7113322696857882b1e1fde11c1fc4","modified":1520922923144},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"10258d5ac3124bca5d87efbb519e1493b99ffc6d","modified":1520922923400},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"eeb2aa6eaa2f6d8a9ce978757ca12fd34b384090","modified":1520922923406},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"43e7223131ca5abac930e8089377c7559caca4ea","modified":1520922923453},{"_id":"themes/archer/.git/objects/pack/pack-c585673f5ded7db4a36af9ecf400b12f0e3f4ee1.idx","hash":"3286bb69261fcae006a48b9151ebe289e60edf93","modified":1520922922695},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1520922923031},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1520922923274},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1520922923293},{"_id":"themes/archer/.git/logs/refs/heads/master","hash":"058ae471718b7733a28a672b0bddca44c8e5d5d8","modified":1520922922930},{"_id":"themes/archer/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1520922922893},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"44d42f7ac3c85e4d2d61e263f490c188e6097129","modified":1520922923426},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"63506ad7c806cb2cdba5cae4b66a744e5efb97be","modified":1520922923420},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"690f6188fdf0113b0ce6d28a97b872ce0f52f792","modified":1520922923432},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"ad14edda32d4e3f05819eda783db321402d37356","modified":1520922923437},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"e88fa63587af0ee490591ff5e8953c8e875dcfd6","modified":1520922923442},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"eabe9fd56908ce595eedc90bb211412aba5d433c","modified":1520922923447},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"de5c3a3ea73d89432ef5705c5e751678cb1f7fd8","modified":1520922923460},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"af7f24c389f61e8722a3dd4eb6a4ea0f4b54d654","modified":1520922923475},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"93cd6d629472a409199ebe432380261ab0973dca","modified":1520922923466},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"ff4e9e3f2eaeb7eb3071a666cdfa61eabad92e3c","modified":1520922923471},{"_id":"themes/archer/source/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1520922923284},{"_id":"themes/archer/.git/logs/refs/remotes/origin/HEAD","hash":"058ae471718b7733a28a672b0bddca44c8e5d5d8","modified":1520922922892},{"_id":"themes/archer/.git/objects/pack/pack-c585673f5ded7db4a36af9ecf400b12f0e3f4ee1.pack","hash":"ce21d843943abdf1af95ff22084e466c30d4505c","modified":1520922922737},{"_id":"public/2018/03/13/RxJava 2.X/index.html","hash":"37a5e8dd23934926e41f7107621f02977621bfbc","modified":1520934125050},{"_id":"public/2018/03/13/hello-world/index.html","hash":"5f9512d1a3162639d04e808af019c082c4634c8e","modified":1520934125050},{"_id":"public/archives/index.html","hash":"ad93c93db7dc7967710316a7f711859a22499df3","modified":1520934125051},{"_id":"public/archives/2018/index.html","hash":"ad93c93db7dc7967710316a7f711859a22499df3","modified":1520934125052},{"_id":"public/archives/2018/03/index.html","hash":"ad93c93db7dc7967710316a7f711859a22499df3","modified":1520934125052},{"_id":"public/index.html","hash":"9b1582c0884105818bdf0bed28f50beb41334ea9","modified":1520934125052},{"_id":"public/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1520934125088},{"_id":"public/assets/favicon.ico","hash":"8b200c575d273d41a179c102442e191414e74eae","modified":1520934125088},{"_id":"public/assets/loading.svg","hash":"85082b002bae1335114b71550350907884187e38","modified":1520934125089},{"_id":"public/assets/psu1.jpg","hash":"01d1694c6c54b4c5626c787b7bda63e1d6eb7cab","modified":1520934125089},{"_id":"public/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1520934125090},{"_id":"public/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1520934125090},{"_id":"public/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1520934125093},{"_id":"public/avatar/psu.jpg","hash":"baee2d2df4d8c09a014ae85c4ef8ee825a2058d9","modified":1520934125107},{"_id":"public/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1520934125110},{"_id":"public/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1520934125110},{"_id":"public/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1520934125111},{"_id":"public/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1520934125111},{"_id":"public/css/mobile.css","hash":"d9275c1b8bbca823ced1dc6b37c25fde70a57980","modified":1520934125123},{"_id":"public/css/style.css","hash":"8e44514feef0fae68484da8a70b8cbd3e9ca7b8d","modified":1520934125123},{"_id":"public/scripts/main.js","hash":"f20e400cc890b3d0191a16a1fad6c276a3a8b3e7","modified":1520934125123},{"_id":"public/scripts/share.js","hash":"0b5db87fbf926e0b1962145d86ee9d5c7e64c44e","modified":1520934125123},{"_id":"public/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1520934125144},{"_id":"public/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1520934125144},{"_id":"public/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1520934125189}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"RXJava 2.X","_content":"1. 基本使用\n \n1.1 方式1：分步骤实现\n1.1.1 使用步骤\n步骤1：创建被观察者 （Observable ）& 生产事件\n步骤2：创建观察者 （Observer ）并 定义响应事件的行为\n•\t发生的事件类型包括：Next事件、Complete事件 & Error事件。具体如下：\n事件类型\t定义\t作用\t使用规则\t使用方法\nNext\t普通事件\t向观察者发送需要响应事件信号\t被观察者可以发送无限个Next事件；观察者可以接受无限个Next事件\tonNext()\nComplete\t事件队列完成事件\t标志被观察者不再发送普通事件(Next)\t1.当被观察者发送了一个Complete事件后：被观察者在Complete事件后的事件将会继续发送，但观察者收到Complete事件后将不再继续接受任何事件\n2.被观察者可以不发送Complete事件\t在一个正确运行的事件序列中：\n\tonCompleted()&onError()二者互斥(即只能有其一)\n\tonCompleted()&onError()是唯一的(只能有一个)\n\tonCompleted()\nError\t事件队列异常事件\t标志事件处理过程中出现异常(此时队列自动终止,不允许再有事件发出)\t1.当被观察者发送了一个Error事件后：被观察者在Error事件后的事件将会继续发送，但观察者收到Error事件后将不再继续接受任何事件\n2.被观察者可以不发送Error事件\t\tonError()\n•\t具体实现\n方式1：采用Observer 接口\n1.\t创建观察者(Observer)对象\nObserver<String> observer = new Observer<String>() {}\n2. 创建对象时通过对应复写对应事件方法从而响应对应事件\n2.1观察者接收事件前，默认最先调用复写 onSubscribe()\n2.2当被观察者生产Next事件 & 观察者接收到时，会调用onNext()方法进行响应\n2.3当被观察者生产Error事件& 观察者接收到时，会调用onError()方法进行响应\n2.4当被观察者生产Complete事件& 观察者接收到时，会调用onComplete()方法进行响应\n方式2：采用Subscriber 抽象类\n说明：Subscriber类 = RxJava 内置的一个实现了 Observer 的抽象类，对 Observer 接口进行了扩展\n1.\t创建观察者(Observer)对象\nSubscriber<String> subscriber = new Subscriber<String>() {}\n2. 创建对象时通过对应复写对应事件方法从而响应对应事件\n2.1观察者接收事件前，默认最先调用复写 onSubscribe()\n2.2当被观察者生产Next事件 & 观察者接收到时，会调用onNext()方法进行响应\n2.3当被观察者生产Error事件& 观察者接收到时，会调用onError()方法进行响应\n2.4当被观察者生产Complete事件& 观察者接收到时，会调用onComplete()方法进行响应\n特别注意：2种方法的区别，即Subscriber 抽象类与Observer 接口的区别\n相同点：二者基本使用方式完全一致（实质上，在RxJava的 subscribe 过程中，Observer总是会先被转换成Subscriber再使用）\n不同点：Subscriber抽象类对 Observer 接口进行了扩展，新增了两个方法：\n1.\tonStart(): 这是 Subscriber 增加的方法。它会在subscribe刚开始，而事件还未发送之前被调用，可以用于做一些准备工作，例如数据的清零或重置。这是一个可选方法，默认情况下它的实现为空。需要注意的是，如果对准备工作的线程有要求（例如弹出一个显示进度的对话框，这必须在主线程执行）， onStart() 就不适用了，因为它总是在 subscribe 所发生的线程被调用，而不能指定线程。要在指定的线程来做准备工作，可以使用 doOnSubscribe() 方法。\n2.\tunsubscribe(): 这是 Subscriber 所实现的另一个接口 Subscription 的方法，用于取消订阅。在这个方法被调用后，Subscriber 将不再接收事件。一般在这个方法调用前，可以使用 isUnsubscribed() 先判断一下状态。 unsubscribe() 这个方法很重要，因为在 subscribe() 之后， Observable 会持有 Subscriber 的引用，这个引用如果不能及时被释放，将有内存泄露的风险。所以最好保持一个原则：在不再使用的时候尽快在合适的地方（例如 onPause() onStop() 等方法中）调用 unsubscribe() 来解除引用关系，以避免内存泄露的发生。\n步骤3：通过订阅（Subscribe）连接观察者和被观察者\n•\t具体实现\nobservable.subscribe(observer);\n // 或者 observable.subscribe(subscriber)；\n•\t扩展说明\n<-- Observable.subscribe(Subscriber) 的内部实现 -->\npublic Subscription subscribe(Subscriber subscriber) {\n    subscriber.onStart();\n    // 步骤1中 观察者  subscriber抽象类复写的方法，用于初始化工作\n    onSubscribe.call(subscriber);\n    // 通过该调用，从而回调观察者中的对应方法从而响应被观察者生产的事件\n    // 从而实现被观察者调用了观察者的回调方法 & 由被观察者向观察者的事件传递，即观察者模式\n    // 同时也看出：Observable只是生产事件，真正的发送事件是在它被订阅的时候，即当 subscribe() 方法执行时\n}\n1.2 方式2：优雅的实现方法 - 基于事件流的链式调用\n•\t上述的实现方式是为了说明Rxjava的原理 & 使用\n•\t在实际应用中，会将上述步骤&代码连在一起，从而更加简洁、更加优雅，即所谓的 RxJava基于事件流的链式调用(整体方法调用顺序：观察者.onSubscribe（）> 被观察者.subscribe（）> 观察者.onNext（）>观察者.onComplete())\n2. 额外说明\n2.1 观察者 Observer的subscribe()具备多个重载的方法\npublic final Disposable subscribe() {}\n// 表示观察者不对被观察者发送的事件作出任何响应（但被观察者还是可以继续发送事件）\npublic final Disposable subscribe(Consumer<? super T> onNext) {}\n// 表示观察者只对被观察者发送的Next事件作出响应\npublic final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> onError) {} \n// 表示观察者只对被观察者发送的Next事件 & Error事件作出响应\npublic final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> onError, Action onComplete) {}\n// 表示观察者只对被观察者发送的Next事件、Error事件 & Complete事件作出响应\npublic final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> onError, Action onComplete, Consumer<? super Disposable> onSubscribe) {}\n// 表示观察者只对被观察者发送的Next事件、Error事件 、Complete事件 & onSubscribe事件作出响应\npublic final void subscribe(Observer<? super T> observer) {}\n// 表示观察者对被观察者发送的任何事件都作出响应\n2.2 可采用 Disposable.dispose() 切断观察者 与 被观察者 之间的连接\n•\t即观察者 无法继续 接收 被观察者的事件，但被观察者还是可以继续发送事件\n•\t具体使用\n// 1. 定义Disposable类变量\nprivate Disposable mDisposable;\n            @Override\n            public void onSubscribe(Disposable d) {\n                Log.d(TAG, \"开始采用subscribe连接\");\n                // 2. 对Disposable类变量赋值\n                mDisposable = d;\n            }\n            @Override\n            public void onNext(Integer value) {\n                Log.d(TAG, \"对Next事件\"+ value +\"作出响应\"  );\n                if (value == 2) {\n                    // 设置在接收到第二个事件后切断观察者和被观察者的连接\n                    mDisposable.dispose();\n                    Log.d(TAG, \"已经切断了连接：\" + mDisposable.isDisposed());\n                }\n            }\n3. RxJava中的操作符\n3.1 map()操作符\nmap是RxJava中最简单的一个变换操作符了, 就是把原来的Observable对象转换成另一个Observable对象，它的作用就是对上游发送的每一个事件应用一个函数, 使得每一个事件都按照指定的函数去变化. 通过Map, 可以将上游发来的事件转换为任意的类型, 可以是一个Object, 也可以是一个集合。\n3.2 FlatMap ()操作符\nFlatMap对于数据的转换比map()更加彻底，如果发送的数据是集合，flatmap()重新生成一个Observable对象，并把数据转换成Observer想要的数据形式。FlatMap将一个发送事件的上游Observable变换为多个发送事件的Observables，然后将它们发射的事件合并后放进一个单独的Observable里. 这里需要注意的是, flatMap并不保证事件的顺序,如果需要保证顺序则需要使用concatMap.\n","source":"_posts/RxJava 2.X.md","raw":"---\ntitle: RXJava 2.X\n---\n1. 基本使用\n \n1.1 方式1：分步骤实现\n1.1.1 使用步骤\n步骤1：创建被观察者 （Observable ）& 生产事件\n步骤2：创建观察者 （Observer ）并 定义响应事件的行为\n•\t发生的事件类型包括：Next事件、Complete事件 & Error事件。具体如下：\n事件类型\t定义\t作用\t使用规则\t使用方法\nNext\t普通事件\t向观察者发送需要响应事件信号\t被观察者可以发送无限个Next事件；观察者可以接受无限个Next事件\tonNext()\nComplete\t事件队列完成事件\t标志被观察者不再发送普通事件(Next)\t1.当被观察者发送了一个Complete事件后：被观察者在Complete事件后的事件将会继续发送，但观察者收到Complete事件后将不再继续接受任何事件\n2.被观察者可以不发送Complete事件\t在一个正确运行的事件序列中：\n\tonCompleted()&onError()二者互斥(即只能有其一)\n\tonCompleted()&onError()是唯一的(只能有一个)\n\tonCompleted()\nError\t事件队列异常事件\t标志事件处理过程中出现异常(此时队列自动终止,不允许再有事件发出)\t1.当被观察者发送了一个Error事件后：被观察者在Error事件后的事件将会继续发送，但观察者收到Error事件后将不再继续接受任何事件\n2.被观察者可以不发送Error事件\t\tonError()\n•\t具体实现\n方式1：采用Observer 接口\n1.\t创建观察者(Observer)对象\nObserver<String> observer = new Observer<String>() {}\n2. 创建对象时通过对应复写对应事件方法从而响应对应事件\n2.1观察者接收事件前，默认最先调用复写 onSubscribe()\n2.2当被观察者生产Next事件 & 观察者接收到时，会调用onNext()方法进行响应\n2.3当被观察者生产Error事件& 观察者接收到时，会调用onError()方法进行响应\n2.4当被观察者生产Complete事件& 观察者接收到时，会调用onComplete()方法进行响应\n方式2：采用Subscriber 抽象类\n说明：Subscriber类 = RxJava 内置的一个实现了 Observer 的抽象类，对 Observer 接口进行了扩展\n1.\t创建观察者(Observer)对象\nSubscriber<String> subscriber = new Subscriber<String>() {}\n2. 创建对象时通过对应复写对应事件方法从而响应对应事件\n2.1观察者接收事件前，默认最先调用复写 onSubscribe()\n2.2当被观察者生产Next事件 & 观察者接收到时，会调用onNext()方法进行响应\n2.3当被观察者生产Error事件& 观察者接收到时，会调用onError()方法进行响应\n2.4当被观察者生产Complete事件& 观察者接收到时，会调用onComplete()方法进行响应\n特别注意：2种方法的区别，即Subscriber 抽象类与Observer 接口的区别\n相同点：二者基本使用方式完全一致（实质上，在RxJava的 subscribe 过程中，Observer总是会先被转换成Subscriber再使用）\n不同点：Subscriber抽象类对 Observer 接口进行了扩展，新增了两个方法：\n1.\tonStart(): 这是 Subscriber 增加的方法。它会在subscribe刚开始，而事件还未发送之前被调用，可以用于做一些准备工作，例如数据的清零或重置。这是一个可选方法，默认情况下它的实现为空。需要注意的是，如果对准备工作的线程有要求（例如弹出一个显示进度的对话框，这必须在主线程执行）， onStart() 就不适用了，因为它总是在 subscribe 所发生的线程被调用，而不能指定线程。要在指定的线程来做准备工作，可以使用 doOnSubscribe() 方法。\n2.\tunsubscribe(): 这是 Subscriber 所实现的另一个接口 Subscription 的方法，用于取消订阅。在这个方法被调用后，Subscriber 将不再接收事件。一般在这个方法调用前，可以使用 isUnsubscribed() 先判断一下状态。 unsubscribe() 这个方法很重要，因为在 subscribe() 之后， Observable 会持有 Subscriber 的引用，这个引用如果不能及时被释放，将有内存泄露的风险。所以最好保持一个原则：在不再使用的时候尽快在合适的地方（例如 onPause() onStop() 等方法中）调用 unsubscribe() 来解除引用关系，以避免内存泄露的发生。\n步骤3：通过订阅（Subscribe）连接观察者和被观察者\n•\t具体实现\nobservable.subscribe(observer);\n // 或者 observable.subscribe(subscriber)；\n•\t扩展说明\n<-- Observable.subscribe(Subscriber) 的内部实现 -->\npublic Subscription subscribe(Subscriber subscriber) {\n    subscriber.onStart();\n    // 步骤1中 观察者  subscriber抽象类复写的方法，用于初始化工作\n    onSubscribe.call(subscriber);\n    // 通过该调用，从而回调观察者中的对应方法从而响应被观察者生产的事件\n    // 从而实现被观察者调用了观察者的回调方法 & 由被观察者向观察者的事件传递，即观察者模式\n    // 同时也看出：Observable只是生产事件，真正的发送事件是在它被订阅的时候，即当 subscribe() 方法执行时\n}\n1.2 方式2：优雅的实现方法 - 基于事件流的链式调用\n•\t上述的实现方式是为了说明Rxjava的原理 & 使用\n•\t在实际应用中，会将上述步骤&代码连在一起，从而更加简洁、更加优雅，即所谓的 RxJava基于事件流的链式调用(整体方法调用顺序：观察者.onSubscribe（）> 被观察者.subscribe（）> 观察者.onNext（）>观察者.onComplete())\n2. 额外说明\n2.1 观察者 Observer的subscribe()具备多个重载的方法\npublic final Disposable subscribe() {}\n// 表示观察者不对被观察者发送的事件作出任何响应（但被观察者还是可以继续发送事件）\npublic final Disposable subscribe(Consumer<? super T> onNext) {}\n// 表示观察者只对被观察者发送的Next事件作出响应\npublic final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> onError) {} \n// 表示观察者只对被观察者发送的Next事件 & Error事件作出响应\npublic final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> onError, Action onComplete) {}\n// 表示观察者只对被观察者发送的Next事件、Error事件 & Complete事件作出响应\npublic final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super Throwable> onError, Action onComplete, Consumer<? super Disposable> onSubscribe) {}\n// 表示观察者只对被观察者发送的Next事件、Error事件 、Complete事件 & onSubscribe事件作出响应\npublic final void subscribe(Observer<? super T> observer) {}\n// 表示观察者对被观察者发送的任何事件都作出响应\n2.2 可采用 Disposable.dispose() 切断观察者 与 被观察者 之间的连接\n•\t即观察者 无法继续 接收 被观察者的事件，但被观察者还是可以继续发送事件\n•\t具体使用\n// 1. 定义Disposable类变量\nprivate Disposable mDisposable;\n            @Override\n            public void onSubscribe(Disposable d) {\n                Log.d(TAG, \"开始采用subscribe连接\");\n                // 2. 对Disposable类变量赋值\n                mDisposable = d;\n            }\n            @Override\n            public void onNext(Integer value) {\n                Log.d(TAG, \"对Next事件\"+ value +\"作出响应\"  );\n                if (value == 2) {\n                    // 设置在接收到第二个事件后切断观察者和被观察者的连接\n                    mDisposable.dispose();\n                    Log.d(TAG, \"已经切断了连接：\" + mDisposable.isDisposed());\n                }\n            }\n3. RxJava中的操作符\n3.1 map()操作符\nmap是RxJava中最简单的一个变换操作符了, 就是把原来的Observable对象转换成另一个Observable对象，它的作用就是对上游发送的每一个事件应用一个函数, 使得每一个事件都按照指定的函数去变化. 通过Map, 可以将上游发来的事件转换为任意的类型, 可以是一个Object, 也可以是一个集合。\n3.2 FlatMap ()操作符\nFlatMap对于数据的转换比map()更加彻底，如果发送的数据是集合，flatmap()重新生成一个Observable对象，并把数据转换成Observer想要的数据形式。FlatMap将一个发送事件的上游Observable变换为多个发送事件的Observables，然后将它们发射的事件合并后放进一个单独的Observable里. 这里需要注意的是, flatMap并不保证事件的顺序,如果需要保证顺序则需要使用concatMap.\n","slug":"RxJava 2.X","published":1,"date":"2018-03-13T05:02:53.959Z","updated":"2018-03-13T05:06:07.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjepgwogl0000vgkj8nk6d8nq","content":"<ol>\n<li>基本使用</li>\n</ol>\n<p>1.1 方式1：分步骤实现<br>1.1.1 使用步骤<br>步骤1：创建被观察者 （Observable ）&amp; 生产事件<br>步骤2：创建观察者 （Observer ）并 定义响应事件的行为<br>•    发生的事件类型包括：Next事件、Complete事件 &amp; Error事件。具体如下：<br>事件类型    定义    作用    使用规则    使用方法<br>Next    普通事件    向观察者发送需要响应事件信号    被观察者可以发送无限个Next事件；观察者可以接受无限个Next事件    onNext()<br>Complete    事件队列完成事件    标志被观察者不再发送普通事件(Next)    1.当被观察者发送了一个Complete事件后：被观察者在Complete事件后的事件将会继续发送，但观察者收到Complete事件后将不再继续接受任何事件<br>2.被观察者可以不发送Complete事件    在一个正确运行的事件序列中：<br>    onCompleted()&amp;onError()二者互斥(即只能有其一)<br>    onCompleted()&amp;onError()是唯一的(只能有一个)<br>    onCompleted()<br>Error    事件队列异常事件    标志事件处理过程中出现异常(此时队列自动终止,不允许再有事件发出)    1.当被观察者发送了一个Error事件后：被观察者在Error事件后的事件将会继续发送，但观察者收到Error事件后将不再继续接受任何事件<br>2.被观察者可以不发送Error事件        onError()<br>•    具体实现<br>方式1：采用Observer 接口</p>\n<ol>\n<li>创建观察者(Observer)对象<br>Observer<string> observer = new Observer<string>() {}</string></string></li>\n<li>创建对象时通过对应复写对应事件方法从而响应对应事件<br>2.1观察者接收事件前，默认最先调用复写 onSubscribe()<br>2.2当被观察者生产Next事件 &amp; 观察者接收到时，会调用onNext()方法进行响应<br>2.3当被观察者生产Error事件&amp; 观察者接收到时，会调用onError()方法进行响应<br>2.4当被观察者生产Complete事件&amp; 观察者接收到时，会调用onComplete()方法进行响应<br>方式2：采用Subscriber 抽象类<br>说明：Subscriber类 = RxJava 内置的一个实现了 Observer 的抽象类，对 Observer 接口进行了扩展</li>\n<li>创建观察者(Observer)对象<br>Subscriber<string> subscriber = new Subscriber<string>() {}</string></string></li>\n<li>创建对象时通过对应复写对应事件方法从而响应对应事件<br>2.1观察者接收事件前，默认最先调用复写 onSubscribe()<br>2.2当被观察者生产Next事件 &amp; 观察者接收到时，会调用onNext()方法进行响应<br>2.3当被观察者生产Error事件&amp; 观察者接收到时，会调用onError()方法进行响应<br>2.4当被观察者生产Complete事件&amp; 观察者接收到时，会调用onComplete()方法进行响应<br>特别注意：2种方法的区别，即Subscriber 抽象类与Observer 接口的区别<br>相同点：二者基本使用方式完全一致（实质上，在RxJava的 subscribe 过程中，Observer总是会先被转换成Subscriber再使用）<br>不同点：Subscriber抽象类对 Observer 接口进行了扩展，新增了两个方法：</li>\n<li>onStart(): 这是 Subscriber 增加的方法。它会在subscribe刚开始，而事件还未发送之前被调用，可以用于做一些准备工作，例如数据的清零或重置。这是一个可选方法，默认情况下它的实现为空。需要注意的是，如果对准备工作的线程有要求（例如弹出一个显示进度的对话框，这必须在主线程执行）， onStart() 就不适用了，因为它总是在 subscribe 所发生的线程被调用，而不能指定线程。要在指定的线程来做准备工作，可以使用 doOnSubscribe() 方法。</li>\n<li>unsubscribe(): 这是 Subscriber 所实现的另一个接口 Subscription 的方法，用于取消订阅。在这个方法被调用后，Subscriber 将不再接收事件。一般在这个方法调用前，可以使用 isUnsubscribed() 先判断一下状态。 unsubscribe() 这个方法很重要，因为在 subscribe() 之后， Observable 会持有 Subscriber 的引用，这个引用如果不能及时被释放，将有内存泄露的风险。所以最好保持一个原则：在不再使用的时候尽快在合适的地方（例如 onPause() onStop() 等方法中）调用 unsubscribe() 来解除引用关系，以避免内存泄露的发生。<br>步骤3：通过订阅（Subscribe）连接观察者和被观察者<br>•    具体实现<br>observable.subscribe(observer);<br>// 或者 observable.subscribe(subscriber)；<br>•    扩展说明<br><-- observable.subscribe(subscriber)=\"\" 的内部实现=\"\" --=\"\"><br>public Subscription subscribe(Subscriber subscriber) {<br>subscriber.onStart();<br>// 步骤1中 观察者  subscriber抽象类复写的方法，用于初始化工作<br>onSubscribe.call(subscriber);<br>// 通过该调用，从而回调观察者中的对应方法从而响应被观察者生产的事件<br>// 从而实现被观察者调用了观察者的回调方法 &amp; 由被观察者向观察者的事件传递，即观察者模式<br>// 同时也看出：Observable只是生产事件，真正的发送事件是在它被订阅的时候，即当 subscribe() 方法执行时<br>}<br>1.2 方式2：优雅的实现方法 - 基于事件流的链式调用<br>•    上述的实现方式是为了说明Rxjava的原理 &amp; 使用<br>•    在实际应用中，会将上述步骤&amp;代码连在一起，从而更加简洁、更加优雅，即所谓的 RxJava基于事件流的链式调用(整体方法调用顺序：观察者.onSubscribe（）&gt; 被观察者.subscribe（）&gt; 观察者.onNext（）&gt;观察者.onComplete())</--></li>\n<li>额外说明<br>2.1 观察者 Observer的subscribe()具备多个重载的方法<br>public final Disposable subscribe() {}<br>// 表示观察者不对被观察者发送的事件作出任何响应（但被观察者还是可以继续发送事件）<br>public final Disposable subscribe(Consumer&lt;? super T&gt; onNext) {}<br>// 表示观察者只对被观察者发送的Next事件作出响应<br>public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError) {}<br>// 表示观察者只对被观察者发送的Next事件 &amp; Error事件作出响应<br>public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Action onComplete) {}<br>// 表示观察者只对被观察者发送的Next事件、Error事件 &amp; Complete事件作出响应<br>public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Action onComplete, Consumer&lt;? super Disposable&gt; onSubscribe) {}<br>// 表示观察者只对被观察者发送的Next事件、Error事件 、Complete事件 &amp; onSubscribe事件作出响应<br>public final void subscribe(Observer&lt;? super T&gt; observer) {}<br>// 表示观察者对被观察者发送的任何事件都作出响应<br>2.2 可采用 Disposable.dispose() 切断观察者 与 被观察者 之间的连接<br>•    即观察者 无法继续 接收 被观察者的事件，但被观察者还是可以继续发送事件<br>•    具体使用<br>// 1. 定义Disposable类变量<br>private Disposable mDisposable;<pre><code>@Override\npublic void onSubscribe(Disposable d) {\n    Log.d(TAG, &quot;开始采用subscribe连接&quot;);\n    // 2. 对Disposable类变量赋值\n    mDisposable = d;\n}\n@Override\npublic void onNext(Integer value) {\n    Log.d(TAG, &quot;对Next事件&quot;+ value +&quot;作出响应&quot;  );\n    if (value == 2) {\n        // 设置在接收到第二个事件后切断观察者和被观察者的连接\n        mDisposable.dispose();\n        Log.d(TAG, &quot;已经切断了连接：&quot; + mDisposable.isDisposed());\n    }\n}\n</code></pre></li>\n<li>RxJava中的操作符<br>3.1 map()操作符<br>map是RxJava中最简单的一个变换操作符了, 就是把原来的Observable对象转换成另一个Observable对象，它的作用就是对上游发送的每一个事件应用一个函数, 使得每一个事件都按照指定的函数去变化. 通过Map, 可以将上游发来的事件转换为任意的类型, 可以是一个Object, 也可以是一个集合。<br>3.2 FlatMap ()操作符<br>FlatMap对于数据的转换比map()更加彻底，如果发送的数据是集合，flatmap()重新生成一个Observable对象，并把数据转换成Observer想要的数据形式。FlatMap将一个发送事件的上游Observable变换为多个发送事件的Observables，然后将它们发射的事件合并后放进一个单独的Observable里. 这里需要注意的是, flatMap并不保证事件的顺序,如果需要保证顺序则需要使用concatMap.</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>基本使用</li>\n</ol>\n<p>1.1 方式1：分步骤实现<br>1.1.1 使用步骤<br>步骤1：创建被观察者 （Observable ）&amp; 生产事件<br>步骤2：创建观察者 （Observer ）并 定义响应事件的行为<br>•    发生的事件类型包括：Next事件、Complete事件 &amp; Error事件。具体如下：<br>事件类型    定义    作用    使用规则    使用方法<br>Next    普通事件    向观察者发送需要响应事件信号    被观察者可以发送无限个Next事件；观察者可以接受无限个Next事件    onNext()<br>Complete    事件队列完成事件    标志被观察者不再发送普通事件(Next)    1.当被观察者发送了一个Complete事件后：被观察者在Complete事件后的事件将会继续发送，但观察者收到Complete事件后将不再继续接受任何事件<br>2.被观察者可以不发送Complete事件    在一个正确运行的事件序列中：<br>    onCompleted()&amp;onError()二者互斥(即只能有其一)<br>    onCompleted()&amp;onError()是唯一的(只能有一个)<br>    onCompleted()<br>Error    事件队列异常事件    标志事件处理过程中出现异常(此时队列自动终止,不允许再有事件发出)    1.当被观察者发送了一个Error事件后：被观察者在Error事件后的事件将会继续发送，但观察者收到Error事件后将不再继续接受任何事件<br>2.被观察者可以不发送Error事件        onError()<br>•    具体实现<br>方式1：采用Observer 接口</p>\n<ol>\n<li>创建观察者(Observer)对象<br>Observer<string> observer = new Observer<string>() {}</string></string></li>\n<li>创建对象时通过对应复写对应事件方法从而响应对应事件<br>2.1观察者接收事件前，默认最先调用复写 onSubscribe()<br>2.2当被观察者生产Next事件 &amp; 观察者接收到时，会调用onNext()方法进行响应<br>2.3当被观察者生产Error事件&amp; 观察者接收到时，会调用onError()方法进行响应<br>2.4当被观察者生产Complete事件&amp; 观察者接收到时，会调用onComplete()方法进行响应<br>方式2：采用Subscriber 抽象类<br>说明：Subscriber类 = RxJava 内置的一个实现了 Observer 的抽象类，对 Observer 接口进行了扩展</li>\n<li>创建观察者(Observer)对象<br>Subscriber<string> subscriber = new Subscriber<string>() {}</string></string></li>\n<li>创建对象时通过对应复写对应事件方法从而响应对应事件<br>2.1观察者接收事件前，默认最先调用复写 onSubscribe()<br>2.2当被观察者生产Next事件 &amp; 观察者接收到时，会调用onNext()方法进行响应<br>2.3当被观察者生产Error事件&amp; 观察者接收到时，会调用onError()方法进行响应<br>2.4当被观察者生产Complete事件&amp; 观察者接收到时，会调用onComplete()方法进行响应<br>特别注意：2种方法的区别，即Subscriber 抽象类与Observer 接口的区别<br>相同点：二者基本使用方式完全一致（实质上，在RxJava的 subscribe 过程中，Observer总是会先被转换成Subscriber再使用）<br>不同点：Subscriber抽象类对 Observer 接口进行了扩展，新增了两个方法：</li>\n<li>onStart(): 这是 Subscriber 增加的方法。它会在subscribe刚开始，而事件还未发送之前被调用，可以用于做一些准备工作，例如数据的清零或重置。这是一个可选方法，默认情况下它的实现为空。需要注意的是，如果对准备工作的线程有要求（例如弹出一个显示进度的对话框，这必须在主线程执行）， onStart() 就不适用了，因为它总是在 subscribe 所发生的线程被调用，而不能指定线程。要在指定的线程来做准备工作，可以使用 doOnSubscribe() 方法。</li>\n<li>unsubscribe(): 这是 Subscriber 所实现的另一个接口 Subscription 的方法，用于取消订阅。在这个方法被调用后，Subscriber 将不再接收事件。一般在这个方法调用前，可以使用 isUnsubscribed() 先判断一下状态。 unsubscribe() 这个方法很重要，因为在 subscribe() 之后， Observable 会持有 Subscriber 的引用，这个引用如果不能及时被释放，将有内存泄露的风险。所以最好保持一个原则：在不再使用的时候尽快在合适的地方（例如 onPause() onStop() 等方法中）调用 unsubscribe() 来解除引用关系，以避免内存泄露的发生。<br>步骤3：通过订阅（Subscribe）连接观察者和被观察者<br>•    具体实现<br>observable.subscribe(observer);<br>// 或者 observable.subscribe(subscriber)；<br>•    扩展说明<br><-- observable.subscribe(subscriber)=\"\" 的内部实现=\"\" --=\"\"><br>public Subscription subscribe(Subscriber subscriber) {<br>subscriber.onStart();<br>// 步骤1中 观察者  subscriber抽象类复写的方法，用于初始化工作<br>onSubscribe.call(subscriber);<br>// 通过该调用，从而回调观察者中的对应方法从而响应被观察者生产的事件<br>// 从而实现被观察者调用了观察者的回调方法 &amp; 由被观察者向观察者的事件传递，即观察者模式<br>// 同时也看出：Observable只是生产事件，真正的发送事件是在它被订阅的时候，即当 subscribe() 方法执行时<br>}<br>1.2 方式2：优雅的实现方法 - 基于事件流的链式调用<br>•    上述的实现方式是为了说明Rxjava的原理 &amp; 使用<br>•    在实际应用中，会将上述步骤&amp;代码连在一起，从而更加简洁、更加优雅，即所谓的 RxJava基于事件流的链式调用(整体方法调用顺序：观察者.onSubscribe（）&gt; 被观察者.subscribe（）&gt; 观察者.onNext（）&gt;观察者.onComplete())</--></li>\n<li>额外说明<br>2.1 观察者 Observer的subscribe()具备多个重载的方法<br>public final Disposable subscribe() {}<br>// 表示观察者不对被观察者发送的事件作出任何响应（但被观察者还是可以继续发送事件）<br>public final Disposable subscribe(Consumer&lt;? super T&gt; onNext) {}<br>// 表示观察者只对被观察者发送的Next事件作出响应<br>public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError) {}<br>// 表示观察者只对被观察者发送的Next事件 &amp; Error事件作出响应<br>public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Action onComplete) {}<br>// 表示观察者只对被观察者发送的Next事件、Error事件 &amp; Complete事件作出响应<br>public final Disposable subscribe(Consumer&lt;? super T&gt; onNext, Consumer&lt;? super Throwable&gt; onError, Action onComplete, Consumer&lt;? super Disposable&gt; onSubscribe) {}<br>// 表示观察者只对被观察者发送的Next事件、Error事件 、Complete事件 &amp; onSubscribe事件作出响应<br>public final void subscribe(Observer&lt;? super T&gt; observer) {}<br>// 表示观察者对被观察者发送的任何事件都作出响应<br>2.2 可采用 Disposable.dispose() 切断观察者 与 被观察者 之间的连接<br>•    即观察者 无法继续 接收 被观察者的事件，但被观察者还是可以继续发送事件<br>•    具体使用<br>// 1. 定义Disposable类变量<br>private Disposable mDisposable;<pre><code>@Override\npublic void onSubscribe(Disposable d) {\n    Log.d(TAG, &quot;开始采用subscribe连接&quot;);\n    // 2. 对Disposable类变量赋值\n    mDisposable = d;\n}\n@Override\npublic void onNext(Integer value) {\n    Log.d(TAG, &quot;对Next事件&quot;+ value +&quot;作出响应&quot;  );\n    if (value == 2) {\n        // 设置在接收到第二个事件后切断观察者和被观察者的连接\n        mDisposable.dispose();\n        Log.d(TAG, &quot;已经切断了连接：&quot; + mDisposable.isDisposed());\n    }\n}\n</code></pre></li>\n<li>RxJava中的操作符<br>3.1 map()操作符<br>map是RxJava中最简单的一个变换操作符了, 就是把原来的Observable对象转换成另一个Observable对象，它的作用就是对上游发送的每一个事件应用一个函数, 使得每一个事件都按照指定的函数去变化. 通过Map, 可以将上游发来的事件转换为任意的类型, 可以是一个Object, 也可以是一个集合。<br>3.2 FlatMap ()操作符<br>FlatMap对于数据的转换比map()更加彻底，如果发送的数据是集合，flatmap()重新生成一个Observable对象，并把数据转换成Observer想要的数据形式。FlatMap将一个发送事件的上游Observable变换为多个发送事件的Observables，然后将它们发射的事件合并后放进一个单独的Observable里. 这里需要注意的是, flatMap并不保证事件的顺序,如果需要保证顺序则需要使用concatMap.</li>\n</ol>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-03-13T04:54:21.656Z","updated":"2018-03-13T04:54:21.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjepgwohh0001vgkj7me3500z","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}